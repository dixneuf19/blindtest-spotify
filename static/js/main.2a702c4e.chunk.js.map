{"version":3,"sources":["logo.svg","loading.svg","Button.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","children","apiToken","base_url","getRandomNumber","x","Math","floor","random","Track","this","track","name","artists","sound","url","preview_url","playStatus","Sound","status","PLAYING","images","album","Component","AlbumCover","src","style","width","height","App","state","text","songsLoaded","currentTrack","tracks","timeout","id","clearTimeout","swal","setNewRandomTracks","n","fetch","method","headers","Authorization","then","response","json","res","items","max","array","counter","length","index","temp","shuffleArray","map","e","filter","_","i","setRandomTracksFromAll","total","getShuffledTracks","setState","setTimeout","resetGame","len_playlist","fetchOneSong","push","fetchNewSongs","console","log","className","logo","alt","loading","checkAnswer","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2a702c4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","/*global swal*/\n\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './Button';\n\n// Not secure, but you can only read my library with this token\nconst apiToken = `BQAqRaOriEd_SMYMWX-yodxfbYatkAj4tU8Fgfi9K9czfqt6N4N-irOtx2d-FxaQNzXZxpv4Xki2hxAe7C8MmUonrYShs-_cTiENxp7bWlFwQa9gCgc2tdBGzPsaCU9ShgBeFuSeAEIn_YjgTvKf0pkt`;\nconst nb_song = 3;\nconst base_url = `https://api.spotify.com/v1/me/tracks`;\nconst timeout_ms = 30000\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\nclass Track extends Component {\n\n\n\n  render() {\n\n    // console.log(this.props)\n    if (!this.props.track) {\n      return (<div><b>No song fetch</b></div>)\n    } else {\n      return (\n        <div><div>\n          <b>{this.props.track.name}</b> by <b>{this.props.track.artists[0].name}</b>\n        </div>\n        <div>\n        {this.props.sound ? <Sound url={this.props.track.preview_url} playStatus={Sound.status.PLAYING}/> : <div></div>}\n        </div>\n          <div>\n            <AlbumCover images={this.props.track.album.images} />\n          </div>\n        </div>)\n    }\n  }\n\n\n}\n\nclass AlbumCover extends Component {\n\n  // const props = {\n  //   images = [{\n  //     url: \"\"\n  //   }],\n  //   ...this.props\n  // }\n\n  render() {\n    const src = this.props.images[0].url; // A changer ;)\n    return (<img src={src} style={{ width: 400, height: 400 }} />);\n  }\n}\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      text: \"\",\n      songsLoaded: false,\n      currentTrack: {},\n      tracks: [],\n      timeout: {}\n    }\n  }\n\n  async checkAnswer(id) {\n      if (id === this.state.currentTrack.id) {\n        clearTimeout(this.state.timeout)\n        await swal(\"Bravo\", `It was ${this.state.currentTrack.name} by ${this.state.currentTrack.artists[0].name}`, \"succes\")\n        this.setNewRandomTracks();\n      } else {\n        swal(\"Nope.\", `It was ${this.state.currentTrack.name} by ${this.state.currentTrack.artists[0].name}`, \"warning\")\n      }\n  }\n\n  async fetchOneSong(n) {\n    return await fetch(`${base_url}?limit=1&offset=${n}`, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + apiToken,\n      },\n    })\n      .then(response => response.json()).then(res => res.items[0].track)\n\n  }\n\n  async fetchNewSongs() {\n     return await fetch(base_url, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + apiToken,\n      },\n    })\n      .then(response => response.json())\n\n  }\n\n  getShuffledTracks(res, max) {\n    return shuffleArray(res.items.map(e => e.track)).filter((_, i) => i < max) \n  }\n\n  async resetGame(state) {\n    await swal(\"Too long !\", `It was ${this.state.currentTrack.name} by ${this.state.currentTrack.artists[0].name}`, \"warning\")\n    await this.setRandomTracksFromAll(state.res.total)\n  }\n\n  setNewRandomTracks() {\n    const tracks = this.getShuffledTracks(this.state.res, nb_song)\n\n    this.setState({\n      currentTrack: tracks[getRandomNumber(nb_song)],\n      tracks,\n      timeout: setTimeout(this.resetGame, timeout_ms)\n    })\n  }\n \n  async setRandomTracksFromAll(len_playlist) {\n    \n    const tracks = []\n    for (let i = 0; i < nb_song ; i++) {\n      const track = await this.fetchOneSong(getRandomNumber(len_playlist))\n      tracks.push(track)\n    }\n\n    this.setState({\n      currentTrack: tracks[getRandomNumber(nb_song)],\n      tracks,\n      timeout: setTimeout(() => this.resetGame(this.state), timeout_ms)\n    })\n\n  }\n\n  async componentDidMount() {\n\n    const res = await this.fetchNewSongs();\n\n    this.setState({\n      res\n    })\n\n    this.setRandomTracksFromAll(this.state.res.total)\n\n    this.setState({\n      songsLoaded: true,\n      text:\n        `Your library has ${res.total} songs !`,\n      \n    })\n\n    console.log(this.state)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n        </header>\n        <div className=\"App-images\">\n          {this.state.songsLoaded ?\n            <div>\n              <p>{this.state.text}</p>\n              <Button onClick={() => this.setNewRandomTracks()}>New songs</Button>\n              \n            </div> :\n            <img src={loading} className=\"App-loading\" alt=\"loading\" />}\n\n        </div>\n        <div className=\"App-buttons\">\n          {\n            this.state.tracks.map((track, i) => {\n              return <Button onClick={() => this.checkAnswer(track.id)} key={i}>\n                <Track track={track} sound={track.id === this.state.currentTrack.id}/>\n                {/* <b>{track.name}</b> by <i>{track.artists[0].name}</i> */}\n                </Button>\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}